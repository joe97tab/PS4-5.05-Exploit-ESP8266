
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>

#include <ESP8266mDNS.h>
#include <DNSServer.h>
//#include <WiFiUdp.h>

#include <FS.h>

//#define NO_CONFIG 1
bool noConfig = false;
#define DBG_OUTPUT_PORT Serial

//DNS settings
const byte DNS_PORT = 53;
DNSServer dnsServer;

//payload settings
WiFiClient ps4;
String ps4IP;

ESP8266WebServer server( 80 );
String host = "ps4exploit";

//AP settings
bool revertToAP = false;
IPAddress local_IP( 10,10,10,1 );
IPAddress gateway( 10,10,10,9 );
IPAddress subnet( 255,255,255,0 );

//default settings
String wifiMode = "ap";
String apName = "ps4exploit";
String apKey = "qwertyuiop";
String stName = "yourrouter";
String stKey = "routerpassword";
String stAddress = "235";

#define resetPin D5

String getContentType( String filename ) {

  if( server.hasArg( "download" ) ) return "application/octet-stream";
  else if( filename.endsWith( ".htm") ) return "text/html";
  else if( filename.endsWith( ".html" ) ) return "text/html";
  else if( filename.endsWith( ".css" ) ) return "text/css";
  else if( filename.endsWith( ".js" ) ) return "application/javascript";
  else if( filename.endsWith( ".png" ) ) return "image/png";
  else if( filename.endsWith( ".gif" ) ) return "image/gif";
  else if( filename.endsWith( ".jpg" ) ) return "image/jpeg";
  else if( filename.endsWith( ".ico" ) ) return "image/x-icon";
  else if( filename.endsWith( ".gz" ) ) return "application/x-gzip";
  return "text/plain";
  
}

bool handleFileRead( String path ){

  path = path.substring( path.lastIndexOf( "/" ) );
  //DBG_OUTPUT_PORT.println( path );
  ps4IP = server.client().remoteIP().toString();
  
  if( path.endsWith( "/" ) ) path = "/index.html";
  if( path.length()  < 3 ) path = "/index.html";
  //if ( !path.startsWith( "/" ) ) path = "/" + path;
  //if ( path.indexOf("#")) DBG_OUTPUT_PORT.println( path.substring(path.indexOf( "#" ) + 1 ) );
  //set up trigger for payload transfer
  String contentType = getContentType( path );
  
  if( SPIFFS.exists( path ) ) {
    
    digitalWrite ( LED_BUILTIN, !digitalRead( LED_BUILTIN ) );
    File file = SPIFFS.open( path, "r" );
    size_t sent = server.streamFile( file, contentType );
    file.close();
    digitalWrite ( LED_BUILTIN, !digitalRead( LED_BUILTIN ) );
    return true;
    
  }
  
  return false;
  
}

void setup( void ){

  pinMode( resetPin, INPUT_PULLUP );
  pinMode( LED_BUILTIN, OUTPUT );
  WiFi.forceSleepBegin();
  DBG_OUTPUT_PORT.begin( 115200 );
  DBG_OUTPUT_PORT.print( "\n" );
  //DBG_OUTPUT_PORT.setDebugOutput( true ); //causing UART problems
  SPIFFS.begin();

  Dir dir = SPIFFS.openDir( "/" );

  if ( digitalRead( resetPin ) == LOW ) {

    DBG_OUTPUT_PORT.println( "Config loading bypassed!" );
    noConfig = true;
    wifiMode = "ap";
    
  }
  

  if ( wifiMode == "ap" ) {
    
    WiFi.mode( WIFI_AP );
    
    if ( WiFi.softAPConfig( local_IP, gateway, subnet ) == false ) {
      
      DBG_OUTPUT_PORT.println( "Couldn't create AP" );
      
    }
    else {
      
      DBG_OUTPUT_PORT.printf( "Creating AP " );
      DBG_OUTPUT_PORT.println( apName );
      
    }
    
    while ( WiFi.softAP( apName.c_str(), apKey.c_str() ) == false ) {
      
      delay( 500 );
      DBG_OUTPUT_PORT.print( "." );
      
    }

    if ( WiFi.softAPIP() == IPAddress( 0, 0, 0, 0 ) ) revertToAP = true;
    else {
      
      DBG_OUTPUT_PORT.println( "" );
      DBG_OUTPUT_PORT.print( "Connected! IP address: " );
      DBG_OUTPUT_PORT.println( WiFi.softAPIP() );
    
    }
    
  }
  else {

    DBG_OUTPUT_PORT.printf( "Connecting to %s\n", stName.c_str() );
    WiFi.mode( WIFI_STA );
    WiFi.begin( stName.c_str(), stKey.c_str() );

    int reconCounter = 0;
    
    while ( WiFi.status() != WL_CONNECTED ) {
      
      delay( 500 );
      DBG_OUTPUT_PORT.print( "." );

      reconCounter++;

      if ( reconCounter == 20 ) {
          
        revertToAP = true;
        break;
          
      }
      
    }

    IPAddress tempIP = WiFi.localIP();
    IPAddress goodIP = WiFi.localIP();
    IPAddress tempSubnet = WiFi.subnetMask();
    char changed = 0;

    for (int i = 0; i < 4; i++ ) {

      if (  tempSubnet[ i ] == 0 ) {
        
        tempIP[ i ] = stAddress.toInt();
        changed++;
        
      }
      
    }

    if (changed == 1 ) {

      WiFi.config( tempIP , WiFi.gatewayIP(), WiFi.subnetMask(), WiFi.dnsIP() );
      reconCounter = 0;

      while ( WiFi.status() != WL_CONNECTED ) {
      
        delay( 500 );
        DBG_OUTPUT_PORT.print( "." );

        reconCounter++;
        
        WiFi.config( goodIP , WiFi.gatewayIP(), WiFi.subnetMask(), WiFi.dnsIP() ); //revert back in case of collision, etc.

        if ( reconCounter == 20 ) {
          
          revertToAP = true;
          break;
          
        }
      
      }

    }

    if ( WiFi.localIP() == IPAddress( 0, 0, 0, 0 ) ) revertToAP = true;
    else {
      
      DBG_OUTPUT_PORT.println( "" );
      DBG_OUTPUT_PORT.print( "Connected! IP address: " );
      DBG_OUTPUT_PORT.println( WiFi.localIP() );
    
    }

  }

  if ( revertToAP == true ) {

    DBG_OUTPUT_PORT.println( "Reverting to default AP" );
    wifiMode = "ap";
    WiFi.mode( WIFI_AP );
    WiFi.softAPConfig( local_IP, gateway, subnet );
  
  }

  MDNS.begin( host.c_str()  );
  
  if ( wifiMode == "ap" ) dnsServer.start( DNS_PORT, "*", WiFi.softAPIP() );
  else dnsServer.start( DNS_PORT, "*", WiFi.localIP() );

  server.onNotFound( []() {
    
    if( !handleFileRead( server.uri() ) ) {
      
      DBG_OUTPUT_PORT.printf( "URI not found " );
      
    }
    //DBG_OUTPUT_PORT.println( server.uri() );
    
  } );

  server.on( "/", HTTP_GET, [] () {
    
    handleFileRead( "/index.html" );
    
  } );
  
  server.begin();
  DBG_OUTPUT_PORT.println( "HTTP server started" ); 
  
}
 
void loop( void ) {

  dnsServer.processNextRequest();
  server.handleClient();
  digitalWrite( LED_BUILTIN, HIGH );

}
